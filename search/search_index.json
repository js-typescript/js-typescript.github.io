{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>As a beginner, it\u2019s perfectly fine to stick to just <code>interface</code> initially to build a strong foundation. As you grow more comfortable, experiment with <code>type</code> in scenarios where its flexibility adds value. The goal is to simplify your learning curve while ensuring your code remains maintainable.</p>"},{"location":"#type-and-interface","title":"Type and Interface","text":""},{"location":"#using-type-for-data-models","title":"Using <code>type</code> for Data Models","text":"<p><code>type</code> is a great choice for complex types like unions or intersections, especially when working with API responses.</p> Typescript<pre><code>// API Response Type\ntype Role = \"admin\" | \"editor\" | \"viewer\"; // Union type\n\ntype User = {\n  id: number;\n  name: string;\n  email: string;\n  role: Role; // Union type used here\n  isActive: boolean;\n};\n\n// Intersection Type (Combining two models)\ntype Timestamps = {\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype UserWithTimestamps = User &amp; Timestamps; // Combining User and Timestamps\n\n// Example usage\nconst exampleUser: UserWithTimestamps = {\n  id: 1,\n  name: \"John Doe\",\n  email: \"john.doe@example.com\",\n  role: \"admin\",\n  isActive: true,\n  createdAt: \"2025-04-09T12:34:56Z\",\n  updatedAt: \"2025-04-09T15:20:00Z\",\n};\n</code></pre>"},{"location":"#using-interface-for-component-props","title":"Using <code>interface</code> for Component Props","text":"<p><code>interface</code> works well for describing props, especially when you want to extend or merge interfaces.</p> Typescript<pre><code>// Base Props\ninterface CommonProps {\n  id: number;\n  isActive: boolean;\n}\n\n// Component-Specific Props\ninterface UserCardProps extends CommonProps {\n  name: string;\n  role: Role; // Reusing Role type\n}\n\n// UserCard Component\nconst UserCard: React.FC&lt;UserCardProps&gt; = ({ id, name, role, isActive }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h3&gt;{name}&lt;/h3&gt;\n      &lt;p&gt;Role: {role}&lt;/p&gt;\n      &lt;p&gt;Status: {isActive ? \"Active\" : \"Inactive\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\n// Example usage\nconst App: React.FC = () =&gt; (\n  &lt;UserCard id={1} name=\"John Doe\" role=\"admin\" isActive={true} /&gt;\n);\n</code></pre>"},{"location":"#mixing-them-in-a-single-project","title":"Mixing Them in a Single Project","text":"<p>While it\u2019s common to use both <code>type</code> and <code>interface</code> in the same codebase, here\u2019s a guiding principle:</p> <ul> <li>Use <code>type</code> for defining data models, like the shape of API responses.</li> <li>Use <code>interface</code> for defining component props, especially when you anticipate extending or merging definitions.</li> </ul>"},{"location":"#suggested-workflow-for-your-project","title":"Suggested Workflow for Your Project","text":"<p>Here\u2019s a step-by-step guide tailored to your first project:</p> <ol> <li> <p>Component Props: Use <code>interface</code> for all component props.</p> Typescript<pre><code>interface ButtonProps {\n  label: string;\n  onClick: () =&gt; void;\n  disabled?: boolean;\n}\n</code></pre> </li> <li> <p>Data Models: Use <code>interface</code> for simple objects and try <code>type</code> for anything complex.</p> Typescript<pre><code>type ApiResponse = {\n  status: \"success\" | \"error\";\n  data: { id: number; name: string }[];\n};\n</code></pre> </li> <li> <p>Consistency: Stick to the same convention (e.g., all props use <code>interface</code>) for consistency across the project.</p> </li> </ol>"},{"location":"#example-of-gradual-transition","title":"Example of Gradual Transition","text":"<p>Here\u2019s how you might evolve your usage of <code>type</code> and <code>interface</code> as your project grows:</p> <ul> <li> <p>Start: Use <code>interface</code> for everything:</p> Typescript<pre><code>interface User {\n  id: number;\n  name: string;\n}\n</code></pre> </li> <li> <p>Later: Use <code>type</code> when you encounter more advanced scenarios:</p> Typescript<pre><code>type User = { id: number; name: string } &amp; { email: string };\n</code></pre> </li> </ul> <p>As a beginner, it\u2019s perfectly fine to stick to just <code>interface</code> initially to build a strong foundation. As you grow more comfortable, experiment with <code>type</code> in scenarios where its flexibility adds value. The goal is to simplify your learning curve while ensuring your code remains maintainable.</p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>\u2728\u267b\ufe0f JavaScript Visualized: Event Loop </li> <li>Visualized</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"typescript/intro/","title":"Intro","text":""}]}